package academy.kata.mis.fileapiservice.controller.outer;

import academy.kata.mis.fileapiservice.model.dto.attachment.contract.TruncateAttachmentsRequest;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

//@PreAuthorize
@RestController
@RequestMapping("/api/file-api/admin")
public class AttachmentAdminController {

    /*
    Администратор удаляет все вложения по переданной директории

    необходимо проверить:
   - переданная организация существует
   - переданный путь существует в переданной организации

   параметры:
   - folderId - опциональный параметр - если folderId не передан то удаляются все директории в переданной организации

   необходимо сделать:
   - удалить физически все директории вместе со всеми вложениями вместе со всеми версиями
   - для каждой удаленной версии создать архивную запись
   - никакой статус текущих версий вложений не блокирует операцию
   - если folderId не передан то удаляются все директории в переданной организации
   - отправить запись в аудит - попытаться сделать это кратко но емко
    */
    public void truncateFolders(Long organizationId,
                                Long folderId) {

    }

    /*
    Администратор удаляет переданные версии вложений по переданной директории

    необходимо проверить:
   - переданная организация существует

   параметры:
   - folderId - обязательный параметр - ид директории
   - AttachIdVersion - соответсвие id вложения и его версии.

   необходимо сделать:
   - удалить физически записи переданных версий вложений в бд по переданной директории для переданной организации
   - если в AttachIdVersion номер версии не передан то физически удалить все вложение со всеми версиями
   - если в AttachIdVersion передан номер то удалить только переданную версию. при этом:
        - если удалена версия промежуточная (например версия 2 из 3х существующих) то просто удаляется 2 номер версии
        - если удаляется текущая версия (например версия 3 из 3х существующих) то необходимо сделать текущей следующую по убыванию
        необходимо учесть что при удалении например 3 версии, версия номер 2 уже могла быть удалена
        - если мы понимаем что нет версии ниже чем текущая - необходимо удалить вложение целиком
        - предусмотреть кейс если переданы на удаление одновременно 2 версии например 3 и 2 из 3х
        - предусмотреть кейс если переданы на удаление два раза одна и та же версия напимер 2 и 2
        - пердусмотреть кейс если переданы на удаление id + номер версии и id + null (без версии) например 2 и null
    */
    public void truncateAttachments(TruncateAttachmentsRequest request) {
    }

    /*
    Администратор синхронизирует MinIO с СУБД

    необходимо проверить:
    - переданная организация существует

    необходимо сделать:
    - пройти по всем файлам в Минио в переданном бакете и для каждого файла спросить:
        есть ли такой в СУБД в сущности AttachmentVersion.fileId - и если нет то удалить файл из Минио
    */
    public void synchronization(Long organizationId) {
    }

}
