package academy.kata.mis.fileapiservice.controller.outer;

import academy.kata.mis.fileapiservice.model.dto.attachment.contract.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.security.Principal;
import java.util.List;

@RestController
@RequestMapping("/api/file-api/attachments")
public class AttachmentEmployeeController {

    /*
    Авторизованный сотрудник загружает несколько файлов

    необходимо проверить:
    - авторизованный пользователь является переданныйм сотрудником
    - переданный сотрудник существует
    - переданный сотрудник имеет статус работающего (в сервисе структуры)
    - файлы не более 10 МБайт, общий вес файлов не превышает 100 МБайт (что бы удобно тестировать)
    - переданный путь существует и он находится в оргпнизации переданного сотрудника

    необходимо сделать:
    - хранить данные в Минио в бакете {organizationId}/{fileId}
    - гененрируется уникальный fileId для каждого файла
    - если коллизии по имени вложения нет - создаем новое вложение с 1 номер версии
    - если есть коллизия по имени необходимо создать новую версию и поменять ссылку на новую текущую версию и скопировать тэги из предыдущей текущей версии
    - если есть хотя бы одно вложение заблокированное другим пользователем - операция прерывается для всех файлов
    - если вложение заблокировано текущим пользователем - вложение загружается, блокировка сохраняется
    - если у текущей версии вложения статус DELETED создается следующая версия но тэги не переносятся
    - загрузить файлы в Минио по обусловленному пути
    - вернуть пользователю респонс
    - если в процессе может произойти несколько однотипных ошибок - их надо передать все а не по одной
    - загружать файлы надо только после всех проверок
    - отправить запись в аудит коротко но емко

    усложнение:
    - можно использвать кэш в виде Redis

    в file-api-service
    - создать в аппликейшене флаг которым можно включить или выключить антивирусную проверку
    - создать тредпул который варьируется от 5 до 15 потоков, имеет очередь 200 элементов и загружать файлы несколькими потоками
    - отправить файлы во временный бакет Минио
    - сохранить в базу данных и вернуть пользователю ответ с ожидающим статусом для вложений
    - отправить в кафку сообщение о необходимости проверить вложение на вирусы в топик запросов
    - реализуй через аутбокс - сохраняю в отдельную таблицу, после этого перекладываю в очередь в хвост,
      есть шедулер который каждые 3 секунды проверяет очередь и если она не пуста то начинает брать из нее элементы и пытаться отправить в кафку.
      если успешно, забывает о элементе, если ошибка - складывает в хвост
    - при старте приложение идет в аутбокс таблицу и из нее наполняет очередь

    в antivirus-service
    - считать сообщение и получить файл из временной папки Минио
    - файл отправит на проверку в интеграцию с антивирусом ClamAV
    - Найти решение которое позволит сделать несколько ретраев (попыток) проверок файла если он падает с ошибкой
    - решение по антивирусной проверке отправить в кафку в топик ответов

    в file-api-service
    - считать ответ из кафки и актуализировать статус вложений
    - в случае отсутсвия вирусов переложить файл из временного бакета Минио в постоянный не копируя в ОЗУ
    - в случае вируса или ошибки удаляем файл из временного бакета без копирования
    - отправить в микросервис notification-service через кафку топик уведомлений сообщение об статусе операции
     */
    public AttachmentsResponse uploadAttachments(Long employeeId,
                                                 Long folderId,
                                                 List<MultipartFile> files) {
        return null;
    }

    /*
    Авторизованный сотрудник получает текущие вложения с пагинацией

    необходимо проверить:
    - авторизованный пользователь является переданным сотрудником
    - переданный сотрудник существует
    - переданный сотрудник имеет статус работающего (в сервисе структуры)

    параметры:
    - getDeleted флаг получения вложений. если true то вернуть все статусы, если false без DELETED
    - fileNamePattern опциональный - паттерн имени - вернуть все вложения в чье имя входит паттерн
    - folderId обязательный
    - size - опциональный, дефолт 20 - количество элементов на странице
    - page - опциональный, дефолт 1 - номер страницы

    необходимо сделать:
    - вернуть все вложения с пагинацией
    - отсортировать респонс сначала по attachmentId
     */
    public AttachmentsWithPaginationResponse getCurrentAttachments(int size,
                                                                   int page,
                                                                   Long employeeId,
                                                                   Long folderId,
                                                                   String fileNamePattern,
                                                                   Boolean getDeleted,
                                                                   Principal principal) {
        return null;
    }

    /*
   Авторизованный сотрудник получает версии переданных вложений

   необходимо проверить:
   - авторизованный пользователь является переданным сотрудником
   - переданный сотрудник существует
   - переданный сотрудник имеет статус работающего (в сервисе структуры)
   - переданные вложения существуют
   - переданныйе вложения и переданный сотрудник из одной организации

   параметры:
   - attachmentsIds - обязательный - искомые вложения по организации сотрудника

   необходимо сделать:
   - вернуть все переданные вложения с их версиями
   - учеть что вложения могут быть в разных директориях
   - отсортировать ответ по folderId а потом по attachmentId
    */
    public AttachmentsResponse getVersions(Long employeeId,
                                           List<Long> attachmentsIds) {
        return null;
    }

    /*
    Авторизованный сотрудник удаляет вложение

    необходимо проверить:
   - авторизованный пользователь является переданным сотрудником
   - переданный сотрудник существует
   - переданный сотрудник имеет статус работающего (в сервисе структуры)
   - переданные вложения существуют
   - переданные вложения и переданный сотрудник из одной организации
   - переданные текущие версии вложений не имеют статус DELETED
   - переданные вложения не заблокированы другми пользователем

   необходимо:
   - создать новую версию вложения со статусом DELETED и сделать ее текущей
   - отправить запись в аудит
     */
    public AttachmentsResponse softDeleteAttachment(Long employeeId,
                                                    List<Long> attachmentsIds) {
        return null;
    }

    /*
    Авторизованный сотрудник копирует текущие версии вложений в директорию

    необходимо проверить:
    - авторизованный пользователь является переданным сотрудником
    - переданный сотрудник существует
    - переданный сотрудник имеет статус работающего (в сервисе структуры)
    - переданные вложения существуют
    - переданные вложения и переданный сотрудник из одной организации
    - переданные текущие версии вложений - источников должны иметь статусы только READY
    - если передан несуществующий путь то его надо создать в организации сотрудника
    - если путь существует то работать с коллизиями вложений как при групповой загрузке
    (создавать новые версии если твложение-цель не заблокировано другим пользователем)

    необходимо:
    - скопировать текущую верси вложений в новую директорию, использовать существующий fileId
    - отправить запись в аудит
     */
    public void copyAttachments(CopyAttachmentRequest request) {

    }

    /*
      Авторизованный сотрудник скачивает версию вложения

      необходимо проверить:
      - авторизованный пользователь является переданным сотрудником
      - переданный сотрудник существует
      - переданный сотрудник имеет статус работающего (в сервисе структуры)
      - переданная версия вложения существуют
      - переданная версия вложения имеет статус READY
      - переданное вложение и переданный сотрудник из одной организации

      необходимо:
      - скачать тело файла из Минио для переданной версии вложения
      - если версия не передана то скачать текущую версию
      - отправить запись в аудит
       */
    public ResponseEntity<byte[]> downloadOne(Long employeeId,
                                              Long attachmentId,
                                              Integer versionNumber) {
        return null;
    }

    /*
    Авторизованный сотрудник скачивает текущие версии переданных вложений

    необходимо проверить:
    - авторизованный пользователь является переданным сотрудником
    - переданный сотрудник существует
    - переданный сотрудник имеет статус работающего (в сервисе структуры)
    - переданные вложения существую и их текщие версии имеют статус READY
    - переданное вложение и переданный сотрудник из одной организации

    необходимо:
    - создать и скачать zip архив с телами файлов из Минио для текущих версий переданных вложений
    - отправить запись в аудит
     */
    public ResponseEntity<byte[]> downloadList(Long employeeId,
                                               List<Long> attachmentIds) {
        return null;
    }

    /*
    Авторизованный сотрудник устанавливает теги к текущим версиям переданных вложений

    необходимо проверить:
    - авторизованный пользователь является переданным сотрудником
    - переданный сотрудник существует
    - переданный сотрудник имеет статус работающего (в сервисе структуры)
    - переданные вложения существуют и их текущие версии не имеют статус DELETED
    - переданные вложения не заблокированы другими пользователями
    - переданные вложения и переданный сотрудник из одной организации

    необходимо:
    - не меняя версии установить теги для переданных версий вложений
    - отправить запись в аудит
     */
    public AttachmentsResponse setTags(SetTagsRequest request) {
        return null;
    }

    /*
    Авторизованный сотрудник (раз)блокирует вложения от модификаций

    необходимо проверить:
    - авторизованный пользователь является переданным сотрудником
    - переданный сотрудник существует
    - переданный сотрудник имеет статус работающего (в сервисе структуры)
    - переданные вложения существую и их текущие версии имеют статус не DELETED
    - вложения не заблокированы другими пользователями
    - переданные вложения и переданный сотрудник из одной организации

    необходимо:
    - не меняя версии установить/снять текущего пользователя как заблокировавшего вложения
    - отправить запись в аудит
     */
    public AttachmentsResponse lockAttachment(LockAttachmentRequest request) {
        return null;
    }

}
